(define (domain overcooked)
  (:requirements :negative-preconditions :hierarchy :typing)
  (:types
      agent interaction-point - container
      pile delivery table pot - interaction-point
      ingredient ingredient-count bowl dish empty pot-label - holdable
      ingredient bowl dish empty - agent-holdable
      cooking-status empty ingredient-count - pot-label
      dish pot-cooking-status - cooking-status
  )
      
  (:predicates
     (holding ?container - container ?holdable - holdable)
     (interaction-exchange-rule ?container1 ?container2 - container ?holdable1a ?holdable2a ?holdable1b ?holdable2b - holdable)
     (cooking-progress ?cooking-status - cooking-status ?cooking-status - cooking-status)
     (dish-start-cooking-label ?dish - dish ?start-cooking-label - cooking-status)
     (recipe ?dish - dish ?i - ingredient ?ing-count - ingredient-count)
     (cooking ?pot - pot)
     (cooked ?pot - pot)   
  )
  (:task make-soup
    :parameters (?dish - dish ?delivery - delivery)
    :effect (holding ?delivery ?dish)
  )

  (:task add-ingredient
    :parameters (?pot - pot ?i - ingredient ?count - ingredient-count)
    :effect (and
      (holding ?pot ?count))
  )

  (:task t-interact
    :parameters (?agent - agent ?target - interaction-point ?a-holding-after ?t-holding-after - holdable)
    :effect (and
      (holding ?agent ?a-holding-after)
      (holding ?target ?t-holding-after))
  )
  (:task cook
    :parameters (?pot - pot ?i-count - ingredient-count ?cooking-label - cooking-status)
    :effect (and
      (cooking ?pot)
      (not (holding ?pot ?i-count)))
  )
  (:task deliver
    :parameters (?dish - dish ?delivery - delivery)
    :effect (holding ?delivery ?dish)
  )
  (:task t-wait-cooking
    :parameters (?a - agent ?pot - pot ?dish - dish)
    :effect (holding ?pot ?dish)
  )

  (:method m-make-soup
    :parameters (?dish - dish ?pot - pot ?delivery - delivery ?i - ingredient ?count - ingredient-count ?cooking-label - cooking-status)
    :task (make-soup ?dish ?delivery)
    :precondition (and
      (recipe ?dish ?i ?count)
      (dish-start-cooking-label ?dish ?cooking-label))
    :ordered-subtasks (and
      (add-ingredient ?pot ?i ?count)
      (cook ?pot ?count ?cooking-label)
      (deliver ?dish ?delivery))
  )
  (:method m-add-ingredient-1-onion
    :parameters (?pot - pot ?i - ingredient ?pile - pile ?1 - ingredient-count ?empty - empty)
    :task (add-ingredient ?pot ?i ?1)
    :precondition (and
      (not (holding ?pot ?1))
      (holding ?pot ?empty)
      (holding ?pile ?i)
      (holding chef2 ?empty)
      (interaction-exchange-rule chef2 ?pile ?empty ?i ?i ?i)
      (interaction-exchange-rule chef2 ?pot ?i ?empty ?empty ?1)
      )
    :ordered-subtasks (and
      (t-interact chef2 ?pile ?i ?i)
      (t-interact chef2 ?pot ?empty ?1)
      )
  )

  (:method m-cook
    :parameters (?pot - pot ?i-count - ingredient-count ?cooking-label - cooking-status ?a - agent ?holding-cooking - empty)
    :task (cook ?pot ?i-count ?cooking-label)
    :precondition (and
      (holding ?pot ?i-count)
      (not (holding ?pot ?cooking-label))
      (interaction-exchange-rule ?a ?pot ?holding-cooking ?i-count ?holding-cooking ?cooking-label)
      )
    :ordered-subtasks (a-interact ?a ?pot ?holding-cooking ?holding-cooking ?i-count ?cooking-label)
  )

  (:method m-deliver
    :parameters (?pot - pot ?delivery - delivery ?b-pile - pile ?dish - dish ?bowl - bowl ?empty - empty)
    :task (deliver ?dish ?delivery)
    :precondition (and
      (not (holding ?delivery ?dish))
      (holding ?b-pile ?bowl)
      (interaction-exchange-rule chef1 ?pot ?bowl ?dish ?dish ?empty)
      (interaction-exchange-rule chef1 ?delivery ?dish ?empty ?empty ?dish)
      )
    :ordered-subtasks (and
      (t-interact chef1 ?b-pile ?bowl ?bowl)
      (t-wait-cooking chef1 ?pot ?dish)
      (t-interact chef1 ?pot ?dish ?empty)
      (t-interact chef1 ?delivery ?empty ?dish))
  )
  (:method m-interact-direct
    :parameters (?agent - agent ?target - interaction-point ?a-holding-before ?a-holding-after - agent-holdable ?t-holding-before ?t-holding-after - holdable)
    :task (t-interact ?agent ?target ?a-holding-after ?t-holding-after)
    :precondition (and
      (holding ?agent ?a-holding-before)
      (holding ?target ?t-holding-before)
      (interaction-exchange-rule ?agent ?target ?a-holding-before ?t-holding-before ?a-holding-after ?t-holding-after))
    :ordered-subtasks (a-interact ?agent ?target ?a-holding-before ?a-holding-after ?t-holding-before ?t-holding-after)
  )
  (:method m-still-wait-cooking
    :parameters (?a - agent ?pot - pot ?dish - dish ?status-before - pot-cooking-status ?status-after - cooking-status)
    :task (t-wait-cooking ?a ?pot ?dish)
    :precondition (and
      (not (holding ?pot ?dish))
      (holding ?pot ?status-before)
      (not (= ?status-before ?status-after))
      (cooking-progress ?status-before ?status-after)
    )
    :ordered-subtasks (and
      (wait ?a ?pot ?status-before ?status-after)
      (t-wait-cooking ?a ?pot ?dish))
  )
  (:method m-done-wait-cooking
    :parameters (?a - agent ?pot - pot ?dish - dish)
    :task (t-wait-cooking ?a ?pot ?dish)
    :precondition (and
      (holding ?pot ?dish)
      )
    :ordered-subtasks (none ?a)
  )
  
  (:action a-interact
    :parameters (?agent - agent ?target - interaction-point ?a-holding-before ?a-holding-after ?ta-holding-before ?ta-holding-after - holdable)
    :precondition (and
      (holding ?agent ?a-holding-before)
      (holding ?target ?ta-holding-before)
      (interaction-exchange-rule ?agent ?target ?a-holding-before ?ta-holding-before ?a-holding-after ?ta-holding-after))
    :effect (and
      (not (holding ?agent ?a-holding-before))
      (not (holding ?target ?ta-holding-before))
      (holding ?agent ?a-holding-after)
      (holding ?target ?ta-holding-after))
  )

  (:action none
    :parameters (?a - agent)
    :precondition ()
    :effect ()
  )
  (:action wait
    :parameters (?a - agent ?pot - pot ?status-before - pot-cooking-status ?status-after - cooking-status)
    :precondition (and
      (cooking-progress ?status-before ?status-after)
      (holding ?pot ?status-before))
    :effect (holding ?pot ?status-after)
  )

  (:action cooking
    :parameters (?pot - pot ?cooking-status-start ?cooking-status-end - cooking-status)
    :precondition (and
      (cooking-progress ?cooking-status-start ?cooking-status-end)
      (holding ?pot ?cooking-status-start))
    :effect (and
      (not (holding ?pot ?cooking-status-start))
      (holding ?pot ?cooking-status-end)
      (cooking ?pot)
      (not (cooked ?pot))
    )
  )
  (:action a-complete-cooking
    :parameters (?pot - pot ?dish - dish)
    :precondition (and
      (holding ?pot ?dish)
      (cooking ?pot)
      (not (cooked ?pot)))
    :effect (and
      (not (cooking ?pot))
      (cooked ?pot))
  )


)

