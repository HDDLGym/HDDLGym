(define (domain smac-multi-agent)
    (:requirements :hierarchy :typing)

    (:types
        unit location enemy - object
        unit
    )

    (:predicates
        (unit-at ?u - unit ?l - location)
        (enemy-at ?e - enemy ?l - location)
        (enemy-defeated ?e - enemy)
        (base-under-attack)
        (squad-ready)
    )

    ;; Top-Level Task: Winning the game
    (:task win-game)
    (:method win-game
        :precondition (squad-ready)
        :subtasks (and
            (attack-enemy-all)
            (defend-base)
        )
    )

    ;; Attack All Enemies Strategy
    (:task attack-enemy-all)
    (:method attack-enemy-all
        :precondition (squad-ready)
        :subtasks (forall (?e - enemy) (attack-enemy ?e))
    )

    (:task attack-enemy ?e - enemy)
    (:method attack-enemy
        :precondition (not (enemy-defeated ?e))
        :subtasks (and
            (move-to ?e)
            (fire ?e)
        )
    )

    ;; Defensive Strategy
    (:task defend-base)
    (:method defend-base
        :precondition (base-under-attack)
        :subtasks (forall (?u - unit) (protect ?u))
    )

    (:task protect ?u - unit)
    (:method protect
        :precondition (base-under-attack)
        :subtasks (and
            (move-to base)
            (fire enemy)
        )
    )

    ;; Primitive Actions
    (:action move-to
        :parameters (?t - object)
        :precondition (not (unit-at ?u ?t))
        :effect (and
            (not (unit-at ?u ?l))
            (unit-at ?u ?t)
        )
    )
    
    (:action fire
        :parameters (?e - enemy)
        :precondition (enemy-at ?e ?l)
        :effect (enemy-defeated ?e)
    )
)
